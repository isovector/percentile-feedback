// Generated by CoffeeScript 1.7.1
(function() {
  var formatTime, getNow, next_boundary, past_bucket_interval, past_wrs, root, today_bucket_interval, today_wr, workTimeToday, workTimeTotal;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  past_wrs = root.past_wrs;

  today_wr = root.today_wr;

  getNow = function() {
    var d, now;
    d = new Date();
    now = d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds();
    if (now < midnight_seconds) {
      now = now + (3600 * 24);
    }
    return now - midnight_seconds;
  };

  root.checkCurrentDay = function() {
    var day, month, now, today, year;
    today = new Date();
    now = today.getHours() * 3600 + today.getMinutes() * 60 + today.getSeconds();
    if (now < midnight_seconds) {
      today.setDate(today.getDate() - 1);
    }
    year = today.getFullYear() === today_wr.date.getFullYear();
    month = today.getMonth() === today_wr.date.getMonth();
    day = today.getDate() === today_wr.date.getDate();
    if ((!year) || (!month) || (!day)) {
      return today_wr = {
        date: today,
        starts: [],
        stops: []
      };
    }
  };

  workTimeToday = function(wr) {
    var i, start, stop, total;
    total = 0;
    i = 0;
    while (i < wr.starts.length) {
      start = wr.starts[i];
      stop = wr.stops[i];
      if (typeof stop === "undefined") {
        stop = getNow();
      }
      total += stop - start;
      ++i;
    }
    return total;
  };

  workTimeTotal = function() {
    var i, total;
    total = 0;
    i = 0;
    while (i < past_wrs.length) {
      total += workTimeToday(past_wrs[i]);
      ++i;
    }
    return total;
  };

  root.updateWorkTime = function() {
    $("#pf_timer_today_total").text(formatTime(workTimeToday(today_wr)));
    return $("#pf_timer_all_time_total").text(formatTime(workTimeTotal()));
  };

  formatTime = function(sec) {
    var hours, minutes, seconds;
    hours = Math.floor(sec / 3600);
    minutes = Math.floor((sec % 3600) / 60);
    seconds = sec % 60;
    if (minutes < 10) {
      minutes = "0" + minutes;
    }
    if (seconds < 10) {
      seconds = "0" + seconds;
    }
    return hours + ":" + minutes + ":" + seconds;
  };

  next_boundary = function(start, interval) {
    var nextBoundary, sinceLastBoundary, untilNextBoundary;
    sinceLastBoundary = start % interval;
    untilNextBoundary = interval - sinceLastBoundary;
    nextBoundary = start + untilNextBoundary;
    return nextBoundary;
  };

  root.generateHistogram = function(wrs, interval, ends_early) {
    var bucket, day_end, end_bucket, histogram, i, j, new_start, new_stop, nextBoundary, period, start, start_bucket, stop, time, wr;
    histogram = [];
    day_end = (ends_early ? getNow() : 86400);
    i = 0;
    while (i < wrs.length) {
      histogram.push([]);
      time = 0;
      while (time < day_end) {
        histogram[i].push({time: 0, task: ""});
        time += interval;
      }
      wr = wrs[i];
      j = 0;
      while (j < wr.starts.length) {
        start = wr.starts[j];
        stop = wr.stops[j];
        task = wr.tasks[j];
        if (typeof stop === "undefined") {
          stop = (wrs.length === 1 ? getNow() : start + 1);
        }
        while (start < stop) {
          nextBoundary = next_boundary(start, interval);
          new_start = void 0;
          new_stop = void 0;
          if (nextBoundary < stop) {
            new_start = nextBoundary;
            new_stop = stop;
            stop = nextBoundary;
          } else {
            new_start = 0;
            new_stop = 0;
          }
          period = stop - start;
          start_bucket = Math.floor((nextBoundary - interval) / interval);
          end_bucket = Math.floor(day_end / interval);
          bucket = start_bucket;
          while (bucket <= end_bucket) {
            if (histogram[i] === undefined) {
              histogram[i] = [];
            }
            if (histogram[i][bucket] === undefined) {
              histogram[i][bucket] = {time: 0, task: ""};
            }
            histogram[i][bucket].time += period;
            histogram[i][bucket].task = task;
            bucket++;
          }
          start = new_start;
          stop = new_stop;
        }
        ++j;
      }
      ++i;
    }
    if (ends_early) {
      histogram[0].pop();
    }
    return histogram;
  };

  past_bucket_interval = 60 * 60;

  today_bucket_interval = 1 * 60;

  root.calculatePercentile = function(past_wrs, today_histogram) {
    var better_day_count, histogram, i, today_total, total, wr;
    if (!past_wrs.length) {
      return 100;
    }
    today_total = today_histogram[0][today_histogram[0].length - 1].time;
    better_day_count = 0;
    i = 0;
    while (i < past_wrs.length) {
      wr = past_wrs[i];
      histogram = generateHistogram([wr], today_bucket_interval, true);
      total = histogram[0][histogram[0].length - 1].time;
      if (total > today_total) {
        ++better_day_count;
      }
      ++i;
    }
    return 100 * (1 - (better_day_count / past_wrs.length));
  };

  root.plotPoint = function(data, histogram, day, bucket, interval, jitter) {
    var hoff, not_a_number, x, y;
    hoff = (midnight_seconds / 3600) % 1;
    x = bucket * interval / 3600;
    y = 100 * histogram[day][bucket].time / ((1 + bucket) * interval);
    if (jitter) {
      x += 1.0 * (Math.random() - 0.5);
    }
    if (x < 0) {
      x = 0 - x;
    }
    if (x > 24) {
      x = 48 - x;
    }
    if (y < 0) {
      y = 0;
    }
    if (y > 100) {
      y = 100;
    }
    not_a_number = function(obj) {
      return obj !== obj;
    };
    if (!not_a_number(y)) {
      return data.push([x + hoff, y, histogram[day][bucket].task]);
    }
  };

  root.processData = function(complete) {
    var bucket, day, past_histogram, today_histogram;
    console.log("1");
    today_histogram = generateHistogram([today_wr], today_bucket_interval, true);
    root.today_percentile = calculatePercentile(past_wrs, today_histogram);
    if (complete) {
      console.log("2");
      past_histogram = generateHistogram(past_wrs, past_bucket_interval);
      root.past_chart_data = [];
      day = 0;
      while (day < past_histogram.length) {
        bucket = 0;
        while (bucket < past_histogram[day].length) {
          plotPoint(root.past_chart_data, past_histogram, day, bucket, past_bucket_interval, true);
          ++bucket;
        }
        ++day;
      }
      root.today_chart_data = [];
      bucket = 0;
      while (bucket < today_histogram[0].length) {
        plotPoint(root.today_chart_data, today_histogram, 0, bucket, today_bucket_interval, false);
        ++bucket;
      }
    }
    return root.today_percentile;
  };

}).call(this);
